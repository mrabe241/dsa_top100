{
  "name": "Adherence Coach (Core HTTP + Trusted Web • Code Nodes)",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "adherence-coach",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2.1,
      "position": [0, 0],
      "id": "webhook-1",
      "name": "Webhook",
      "webhookId": "adherence-coach"
    },
    {
      "parameters": {
        "jsCode": "return items.map(item => {\n  const t = (x) => (x ?? '').toString().trim().slice(0, 1000);\n  const n = (x) => Number.isFinite(Number(x)) ? Number(x) : 0;\n  const b = item.json || {};\n  return { json: { input: { text: t(b.text), missed_doses: n(b.missed_doses), symptoms: t(b.symptoms), concerns: t(b.concerns) } } };\n});"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [220, 0],
      "id": "code-normalize",
      "name": "Normalize Input"
    },
    {
      "parameters": {
        "jsCode": "return items.map(item => {\n  const input = item.json.input;\n  return { json: { payload: {\n    model: \"gpt-4o-mini\",\n    response_format: { type: \"json_object\" },\n    temperature: 0.2,\n    messages: [\n      { role: \"system\", content: \"Classify medication-adherence barriers. Output JSON only: { \\\"barriers\\\": [labels], \\\"confidence\\\": 0..1 }. Labels: forgetfulness, fear_of_side_effects, cost, complex_regimen, low_motivation, low_health_literacy, access_issues, side_effects_present. Choose 1–3. Be conservative.\" },\n      { role: \"user\", content: `Patient input: ${JSON.stringify(input)}` }\n    ]\n  } } };\n});"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [460, -120],
      "id": "code-build-classifier",
      "name": "Build Classifier Payload"
    },
    {
      "parameters": {
        "url": "https://api.openai.com/v1/chat/completions",
        "method": "POST",
        "responseFormat": "json",
        "jsonParameters": true,
        "sendHeaders": true,
        "headerParametersUi": {
          "parameter": [
            { "name": "Authorization", "value": "Bearer {{$env.OPENAI_API_KEY}}" },
            { "name": "Content-Type", "value": "application/json" }
          ]
        },
        "sendBody": true,
        "bodyParametersJson": "={{ JSON.stringify($json.payload) }}"
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [700, -120],
      "id": "http-classifier",
      "name": "HTTP: Classifier"
    },
    {
      "parameters": {
        "jsCode": "return items.map(item => {\n  const raw = item.json?.choices?.[0]?.message?.content || '{}';\n  let parsed; try { parsed = JSON.parse(raw) } catch { parsed = {} }\n  const barriers = Array.isArray(parsed.barriers) ? parsed.barriers.slice(0,3) : [];\n  const confidence = Number.isFinite(Number(parsed.confidence)) ? Number(parsed.confidence) : 0;\n  return { json: { barriers, confidence } };\n});"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [940, -120],
      "id": "code-parse-classifier",
      "name": "Parse Classifier JSON"
    },
    {
      "parameters": {
        "jsCode": "return items.map(item => {\n  const KB = {\n    fear_of_side_effects: [\n      \"Keep a brief symptom diary to discuss specifics with your clinician.\",\n      \"Practice a 2-minute breathing exercise before your dose.\",\n      \"Use trusted sources (CDC/FDA) rather than random searches.\",\n      \"If concerned, note it, continue routine, and contact your clinician if it persists.\"\n    ],\n    forgetfulness: [\n      \"Set recurring phone alarms at dose times.\",\n      \"Pair your dose with a daily routine (brushing teeth/breakfast).\",\n      \"Use a weekly pillbox in a visible place.\"\n    ],\n    low_motivation: [\n      \"Track adherence and give yourself a small weekly reward.\",\n      \"Link the dose to a personal goal (e.g., more energy for family).\",\n      \"Use short positive self-talk.\"\n    ],\n    complex_regimen: [\n      \"Use a pill organizer labeled by time of day.\",\n      \"Post a simple schedule where you can see it daily.\",\n      \"Ask your clinician/pharmacist whether timing can be simplified.\"\n    ]\n  };\n  const labels = item.json.barriers || [];\n  const out = [];\n  for (const b of labels) (KB[b]||[]).forEach(s => out.push({ text: s, source: \"kb\" }));\n  return { json: { candidates_kb: out } };\n});"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1180, -200],
      "id": "code-load-kb",
      "name": "Load KB (Pre-approved)"
    },
    {
      "parameters": {
        "url": "https://www.cdc.gov/search/?query=medication%20adherence%20{{$node[\"Parse Classifier JSON\"].json.barriers?.[0] || 'tips'}}",
        "responseFormat": "string",
        "options": { "fullResponse": true }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [1180, -20],
      "id": "http-cdc",
      "name": "HTTP: CDC Search"
    },
    {
      "parameters": {
        "url": "https://search.nih.gov/search?utf8=%E2%9C%93&affiliate=nih&query=medication%20adherence%20{{$node[\"Parse Classifier JSON\"].json.barriers?.[0] || 'tips'}}",
        "responseFormat": "string",
        "options": { "fullResponse": true }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [1180, 120],
      "id": "http-nih",
      "name": "HTTP: NIH Search"
    },
    {
      "parameters": {
        "jsCode": "function strip(html){return String(html||'').replace(/<script[\\s\\S]*?<\\/script>/gi,'').replace(/<style[\\s\\S]*?<\\/style>/gi,'').replace(/<[^>]+>/g,' ').replace(/\\s+/g,' ').trim().slice(0,4000);} \nconst all = $input.all();\nconst chunks = [];\nfor (const inb of all){\n  const b = inb.json || {};\n  const body = b.body || b;\n  const text = strip(body);\n  if (inb.node.name.includes('CDC')) chunks.push({domain:'cdc.gov', text});\n  if (inb.node.name.includes('NIH')) chunks.push({domain:'nih.gov', text});\n}\nreturn [{ json: { webText: chunks } }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1420, 50],
      "id": "code-collect-web",
      "name": "Collect Web Text"
    },
    {
      "parameters": {
        "jsCode": "return items.map(item => {\n  const extracts = item.json.webText || [];\n  return { json: { payload: {\n    model: \"gpt-4o-mini\",\n    response_format: { type: \"json_object\" },\n    temperature: 0.2,\n    messages: [\n      { role: \"system\", content: \"Extract behavioral adherence strategies (non-medical) from provided text. Output JSON only: {\\\\\"strategies\\\\\":[..]}\" },\n      { role: \"user\", content: `Trusted extracts: ${JSON.stringify(extracts)}` }\n    ]\n  } } };\n});"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1660, 50],
      "id": "code-build-extractor",
      "name": "Build Extractor Payload"
    },
    {
      "parameters": {
        "url": "https://api.openai.com/v1/chat/completions",
        "method": "POST",
        "responseFormat": "json",
        "jsonParameters": true,
        "sendHeaders": true,
        "headerParametersUi": {
          "parameter": [
            { "name": "Authorization", "value": "Bearer {{$env.OPENAI_API_KEY}}" },
            { "name": "Content-Type", "value": "application/json" }
          ]
        },
        "sendBody": true,
        "bodyParametersJson": "={{ JSON.stringify($json.payload) }}"
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [1900, 50],
      "id": "http-extractor",
      "name": "HTTP: Web Strategy Extractor"
    },
    {
      "parameters": {
        "jsCode": "return items.map(item => {\n  const raw = item.json?.choices?.[0]?.message?.content || '{}';\n  let parsed; try { parsed = JSON.parse(raw) } catch { parsed = {} }\n  const arr = Array.isArray(parsed.strategies) ? parsed.strategies : [];\n  return { json: { candidates_web: arr.map(s => ({ text: String(s), source: 'web' })) } };\n});"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [2140, 50],
      "id": "code-map-web",
      "name": "Map Web Candidates"
    },
    {
      "parameters": {
        "jsCode": "const inputs = $input.all();\nconst kb = (inputs.find(i => i.node.name.includes('Load KB'))?.json.candidates_kb) || [];\nconst web = (inputs.find(i => i.node.name.includes('Map Web'))?.json.candidates_web) || [];\nconst all = [...kb, ...web];\nconst seen = new Set();\nconst dedup = [];\nfor (const c of all){ const k=(c.text||'').toLowerCase().trim(); if(!k||seen.has(k)) continue; seen.add(k); dedup.push(c); }\nconst banned=/double dose|skip dose|increase dose|decrease dose|\\bmg\\b|milligram|store in unsafe/i;\nconst safe = dedup.filter(c => !banned.test(c.text));\nsafe.forEach(c=> c.score = (c.source==='kb'?2:1));\nsafe.sort((a,b)=> b.score-a.score);\nreturn [{ json: { candidates: safe.slice(0,8) } }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [2380, -80],
      "id": "code-merge-guard",
      "name": "Merge + Guard"
    },
    {
      "parameters": {
        "jsCode": "return items.map(item => {\n  const data = item.json;\n  return { json: { payload: {\n    model: \"gpt-4o-mini\",\n    response_format: { type: \"json_object\" },\n    temperature: 0.6,\n    messages: [\n      { role: \"system\", content: \"You are a Behavioral Strategist AI for medication adherence. Use ONLY from provided candidates. Choose 2–3. No medical/dosing advice. Output JSON only: {\\\\\"final_strategies\\\\\":[..]}\" },\n      { role: \"user\", content: `Candidates: ${JSON.stringify(data.candidates)}` }\n    ]\n  } } };\n});"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [2620, -80],
      "id": "code-build-strategist",
      "name": "Build Strategist Payload"
    },
    {
      "parameters": {
        "url": "https://api.openai.com/v1/chat/completions",
        "method": "POST",
        "responseFormat": "json",
        "jsonParameters": true,
        "sendHeaders": true,
        "headerParametersUi": {
          "parameter": [
            { "name": "Authorization", "value": "Bearer {{$env.OPENAI_API_KEY}}" },
            { "name": "Content-Type", "value": "application/json" }
          ]
        },
        "sendBody": true,
        "bodyParametersJson": "={{ JSON.stringify($json.payload) }}"
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [2860, -80],
      "id": "http-strategist",
      "name": "HTTP: Strategist"
    },
    {
      "parameters": {
        "jsCode": "return items.map(item => {\n  let parsed={}; try{ parsed = JSON.parse(item.json?.choices?.[0]?.message?.content || '{}') } catch {}\n  const picks = Array.isArray(parsed.final_strategies) ? parsed.final_strategies.slice(0,3) : [];\n  return { json: { final_strategies: picks } };\n});"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [3100, -80],
      "id": "code-parse-strategist",
      "name": "Parse Strategist JSON"
    },
    {
      "parameters": {
        "jsCode": "const all = $input.all();\nconst chosen = (all.find(i=>i.node.name.includes('Parse Strategist'))?.json.final_strategies) || [];\nif (chosen.length>0) return [{ json: { final_strategies: chosen } }];\nconst candidates = (all.find(i=>i.node.name.includes('Merge + Guard'))?.json.candidates) || [];\nreturn [{ json: { final_strategies: candidates.slice(0,2).map(c=>c.text) } }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [3340, -80],
      "id": "code-pick-fallback",
      "name": "Pick (with Fallback)"
    },
    {
      "parameters": {
        "jsCode": "return items.map(item => {\n  const selected = item.json.final_strategies || [];\n  return { json: { payload: {\n    model: \"gpt-4o\",\n    temperature: 0.2,\n    messages: [\n      { role: \"system\", content: \"You are a Reasoning/Safety AI. Validate and phrase selected strategies empathetically. No dosing or clinical instructions. Output short plain text.\" },\n      { role: \"user\", content: `Selected strategies: ${JSON.stringify(selected)}` }\n    ]\n  } } };\n});"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [3580, -80],
      "id": "code-build-reasoner",
      "name": "Build Reasoner Payload"
    },
    {
      "parameters": {
        "url": "https://api.openai.com/v1/chat/completions",
        "method": "POST",
        "responseFormat": "json",
        "jsonParameters": true,
        "sendHeaders": true,
        "headerParametersUi": {
          "parameter": [
            { "name": "Authorization", "value": "Bearer {{$env.OPENAI_API_KEY}}" },
            { "name": "Content-Type", "value": "application/json" }
          ]
        },
        "sendBody": true,
        "bodyParametersJson": "={{ JSON.stringify($json.payload) }}"
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [3820, -80],
      "id": "http-reasoner",
      "name": "HTTP: Reasoner"
    },
    {
      "parameters": {
        "jsCode": "return items.map(item => ({ json: { message: (item.json?.choices?.[0]?.message?.content || '').toString() } }));"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [4060, -80],
      "id": "code-extract-text",
      "name": "Extract Final Text"
    },
    {
      "parameters": {
        "responseBody": "={{ $json }}",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 2,
      "position": [4300, -80],
      "id": "respond-1",
      "name": "Respond"
    }
  ],
  "connections": {
    "Webhook": {
      "main": [[{ "node": "Normalize Input", "type": "main", "index": 0 }]]
    },
    "Normalize Input": {
      "main": [[{ "node": "Build Classifier Payload", "type": "main", "index": 0 }]]
    },
    "Build Classifier Payload": {
      "main": [[{ "node": "HTTP: Classifier", "type": "main", "index": 0 }]]
    },
    "HTTP: Classifier": {
      "main": [[{ "node": "Parse Classifier JSON", "type": "main", "index": 0 }]]
    },
    "Parse Classifier JSON": {
      "main": [
        [{ "node": "Load KB (Pre-approved)", "type": "main", "index": 0 }],
        [{ "node": "HTTP: CDC Search", "type": "main", "index": 0 }],
        [{ "node": "HTTP: NIH Search", "type": "main", "index": 0 }]
      ]
    },
    "HTTP: CDC Search": {
      "main": [[{ "node": "Collect Web Text", "type": "main", "index": 0 }]]
    },
    "HTTP: NIH Search": {
      "main": [[{ "node": "Collect Web Text", "type": "main", "index": 0 }]]
    },
    "Collect Web Text": {
      "main": [[{ "node": "Build Extractor Payload", "type": "main", "index": 0 }]]
    },
    "Build Extractor Payload": {
      "main": [[{ "node": "HTTP: Web Strategy Extractor", "type": "main", "index": 0 }]]
    },
    "HTTP: Web Strategy Extractor": {
      "main": [[{ "node": "Map Web Candidates", "type": "main", "index": 0 }]]
    },
    "Map Web Candidates": {
      "main": [[{ "node": "Merge + Guard", "type": "main", "index": 0 }]]
    },
    "Load KB (Pre-approved)": {
      "main": [[{ "node": "Merge + Guard", "type": "main", "index": 0 }]]
    },
    "Merge + Guard": {
      "main": [[{ "node": "Build Strategist Payload", "type": "main", "index": 0 }]]
    },
    "Build Strategist Payload": {
      "main": [[{ "node": "HTTP: Strategist", "type": "main", "index": 0 }]]
    },
    "HTTP: Strategist": {
      "main": [[{ "node": "Parse Strategist JSON", "type": "main", "index": 0 }]]
    },
    "Parse Strategist JSON": {
      "main": [[{ "node": "Pick (with Fallback)", "type": "main", "index": 0 }]]
    },
    "Pick (with Fallback)": {
      "main": [[{ "node": "Build Reasoner Payload", "type": "main", "index": 0 }]]
    },
    "Build Reasoner Payload": {
      "main": [[{ "node": "HTTP: Reasoner", "type": "main", "index": 0 }]]
    },
    "HTTP: Reasoner": {
      "main": [[{ "node": "Extract Final Text", "type": "main", "index": 0 }]]
    },
    "Extract Final Text": {
      "main": [[{ "node": "Respond", "type": "main", "index": 0 }]]
    }
  },
  "active": false,
  "settings": { "executionOrder": "v1" },
  "versionId": "core-http-trusted-web-code",
  "meta": {
    "instanceId": "replace-with-your-instance-id"
  },
  "id": "AdherenceCoach-CoreHTTP-TrustedWeb-Code",
  "tags": []
}
