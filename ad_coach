{
  "name": "Adherence Coach (Core HTTP version)",
  "nodes": [
    {
      "parameters": {
        "path": "adherence-coach",
        "options": {
          "response": "Using 'Respond to Webhook' node"
        }
      },
      "id": "Webhook",
      "name": "Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [220, 200]
    },
    {
      "parameters": {
        "functionCode": "const t = (x)=> (x ?? '').toString().trim().slice(0,1000);\nconst n = (x)=> Number.isFinite(Number(x)) ? Number(x) : 0;\nconst body = $json;\nreturn [{ input: { text: t(body.text), missed_doses: n(body.missed_doses), symptoms: t(body.symptoms), concerns: t(body.concerns) } }];"
      },
      "id": "Normalize",
      "name": "Normalize Input",
      "type": "n8n-nodes-base.function",
      "typeVersion": 2,
      "position": [470, 200]
    },
    {
      "parameters": {
        "functionCode": "// Build OpenAI chat payload for barrier classifier\nconst input = $json.input;\nconst payload = {\n  model: \"gpt-4o-mini\",\n  response_format: { type: \"json_object\" },\n  temperature: 0.2,\n  messages: [\n    { role: \"system\", content: \"You classify medication-adherence barriers. Output JSON only: { \\\"barriers\\\": [<labels>], \\\"confidence\\\": <0..1> } Labels: forgetfulness, fear_of_side_effects, cost, complex_regimen, low_motivation, low_health_literacy, access_issues, side_effects_present. Choose 1–3. Be conservative. No extra text.\" },\n    { role: \"user\", content: `Patient input:\\n${JSON.stringify(input)}` }\n  ]\n};\nreturn [{ payload }];"
      },
      "id": "BuildClassifierPayload",
      "name": "Build Classifier Payload",
      "type": "n8n-nodes-base.function",
      "typeVersion": 2,
      "position": [700, 120]
    },
    {
      "parameters": {
        "url": "https://api.openai.com/v1/chat/completions",
        "method": "POST",
        "responseFormat": "json",
        "jsonParameters": true,
        "options": {},
        "sendHeaders": true,
        "headerParametersUi": {
          "parameter": [
            { "name": "Authorization", "value": "Bearer {{$env.OPENAI_API_KEY}}" },
            { "name": "Content-Type", "value": "application/json" }
          ]
        },
        "sendBody": true,
        "bodyParametersJson": "={{JSON.stringify($json.payload)}}"
      },
      "id": "HTTPClassifier",
      "name": "HTTP: Classifier",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [950, 120]
    },
    {
      "parameters": {
        "functionCode": "const raw = $json?.choices?.[0]?.message?.content || '{}';\nlet parsed = {};\ntry { parsed = JSON.parse(raw); } catch(e) { parsed = { barriers: [], confidence: 0 }; }\nreturn [{ barriers: parsed.barriers || [], confidence: parsed.confidence ?? 0 }];"
      },
      "id": "ParseClassifier",
      "name": "Parse Classifier JSON",
      "type": "n8n-nodes-base.function",
      "typeVersion": 2,
      "position": [1200, 120]
    },
    {
      "parameters": {
        "functionCode": "/* Pre-approved KB; extend as needed */\nconst KB = {\n  fear_of_side_effects: [\n    \"Keep a brief symptom diary to discuss specifics with your clinician.\",\n    \"Practice a 2-minute breathing exercise before your dose.\",\n    \"Use trusted sources (FDA/CDC) rather than random searches.\",\n    \"If concerned, make an 'if-then' plan: note it, continue routine, contact clinician if it persists.\"\n  ],\n  forgetfulness: [\n    \"Set recurring phone alarms at dose times.\",\n    \"Pair your dose with a daily routine (brushing teeth, breakfast).\",\n    \"Use a weekly pillbox kept in a visible place.\"\n  ],\n  low_motivation: [\n    \"Track adherence in a simple app and reward weekly consistency.\",\n    \"Link the dose to a personal goal (e.g., more energy for family).\",\n    \"Use positive self-talk; remind yourself why staying on track matters.\"\n  ],\n  complex_regimen: [\n    \"Use a pill organizer divided by time of day.\",\n    \"Post a simple schedule where you can see it daily.\",\n    \"Ask your clinician/pharmacist about simplifying timing (appointment needed).\"\n  ]\n};\n\nconst labels = $json.barriers || [];\nconst out = [];\nfor (const b of labels) (KB[b]||[]).forEach(s => out.push({ text: s, source: \"kb\" }));\nreturn [{ candidates: out, barriers: labels, input: $node[\"Normalize Input\"].json.input }];"
      },
      "id": "LoadKB",
      "name": "Load KB (Pre-approved)",
      "type": "n8n-nodes-base.function",
      "typeVersion": 2,
      "position": [1450, 120]
    },
    {
      "parameters": {
        "functionCode": "// Merge-only path (no web lane here). Guard + rank.\nconst all = $json.candidates || [];\n// Dedupe\nconst seen = new Set();\nconst dedup = [];\nfor (const c of all) {\n  const key = (c.text||'').toLowerCase().trim();\n  if (!key || seen.has(key)) continue;\n  seen.add(key);\n  dedup.push(c);\n}\n// Guardrails\nconst banned = /double dose|skip dose|increase dose|decrease dose|\\bmg\\b|milligram|store in unsafe/i;\nconst safe = dedup.filter(c => !banned.test(c.text));\n// Score (KB preferred)\nsafe.forEach(c => c.score = c.source === 'kb' ? 2 : 0);\nsafe.sort((a,b)=> b.score - a.score);\nreturn [{ candidates: safe.slice(0,8), barriers: $json.barriers, input: $json.input }];"
      },
      "id": "MergeGuard",
      "name": "Merge + Guard",
      "type": "n8n-nodes-base.function",
      "typeVersion": 2,
      "position": [1680, 120]
    },
    {
      "parameters": {
        "functionCode": "// Build strategist payload using candidates only\nconst data = $json;\nconst payload = {\n  model: \"gpt-4o-mini\",\n  response_format: { type: \"json_object\" },\n  temperature: 0.6,\n  messages: [\n    { role: \"system\", content: \"You are a Behavioral Strategist AI for medication adherence. Use ONLY the provided candidate strategies. Do not invent medical/dosing advice. Choose the 2–3 best for the detected barriers and the user's context. Personalize wording; keep supportive and practical. Return JSON: { \\\"final_strategies\\\": [ \\\"...\\\" ] }\" },\n    { role: \"user\", content: `Barriers: ${JSON.stringify(data.barriers)}\\nCandidates: ${JSON.stringify(data.candidates)}\\nPatient context: ${JSON.stringify(data.input)}` }\n  ]\n};\nreturn [{ payload }];"
      },
      "id": "BuildStrategistPayload",
      "name": "Build Strategist Payload",
      "type": "n8n-nodes-base.function",
      "typeVersion": 2,
      "position": [1910, 120]
    },
    {
      "parameters": {
        "url": "https://api.openai.com/v1/chat/completions",
        "method": "POST",
        "responseFormat": "json",
        "jsonParameters": true,
        "sendHeaders": true,
        "headerParametersUi": {
          "parameter": [
            { "name": "Authorization", "value": "Bearer {{$env.OPENAI_API_KEY}}" },
            { "name": "Content-Type", "value": "application/json" }
          ]
        },
        "sendBody": true,
        "bodyParametersJson": "={{JSON.stringify($json.payload)}}"
      },
      "id": "HTTPStrategist",
      "name": "HTTP: Strategist",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [2140, 120]
    },
    {
      "parameters": {
        "functionCode": "const raw = $json?.choices?.[0]?.message?.content || '{}';\nlet parsed = {};\ntry { parsed = JSON.parse(raw); } catch(e) { parsed = { final_strategies: [] }; }\nreturn [{ final_strategies: parsed.final_strategies || [] }];"
      },
      "id": "ParseStrategist",
      "name": "Parse Strategist JSON",
      "type": "n8n-nodes-base.function",
      "typeVersion": 2,
      "position": [2370, 120]
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            { "value1": "={{Array.isArray($json.final_strategies) && $json.final_strategies.length>0}}", "operation": "isTrue" }
          ]
        }
      },
      "id": "SchemaCheck",
      "name": "Schema Check",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [2590, 120]
    },
    {
      "parameters": {
        "functionCode": "/* Fallback: take top 2 KB candidates if strategist failed */\nconst merge = $node[\"Merge + Guard\"].json;\nconst picks = (merge.candidates || []).slice(0,2).map(c => c.text);\nreturn [{ final_strategies: picks }];"
      },
      "id": "FallbackPicks",
      "name": "Fallback Picks",
      "type": "n8n-nodes-base.function",
      "typeVersion": 2,
      "position": [2590, 260]
    },
    {
      "parameters": {
        "functionCode": "// Build reasoner payload (plain text output)\nconst input = $node[\"Normalize Input\"].json.input;\nconst barriers = $node[\"Parse Classifier JSON\"].json;\nconst selected = $json.final_strategies;\nconst payload = {\n  model: \"gpt-4o\",\n  temperature: 0.2,\n  messages: [\n    { role: \"system\", content: \"You are a Reasoning/Safety AI. Validate the selected strategies for safety, feasibility, and fit. Remove anything unsafe or impractical; be empathetic and clear. No dosing or clinical instructions. Encourage clinician contact for medical concerns. Return a short patient-ready message (plain text).\" },\n    { role: \"user\", content: `Patient input:\\n${JSON.stringify(input)}\\n\\nBarriers:\\n${JSON.stringify(barriers)}\\n\\nSelected strategies:\\n${JSON.stringify(selected)}` }\n  ]\n};\nreturn [{ payload }];"
      },
      "id": "BuildReasonerPayload",
      "name": "Build Reasoner Payload",
      "type": "n8n-nodes-base.function",
      "typeVersion": 2,
      "position": [2810, 120]
    },
    {
      "parameters": {
        "url": "https://api.openai.com/v1/chat/completions",
        "method": "POST",
        "responseFormat": "json",
        "jsonParameters": true,
        "sendHeaders": true,
        "headerParametersUi": {
          "parameter": [
            { "name": "Authorization", "value": "Bearer {{$env.OPENAI_API_KEY}}" },
            { "name": "Content-Type", "value": "application/json" }
          ]
        },
        "sendBody": true,
        "bodyParametersJson": "={{JSON.stringify($json.payload)}}"
      },
      "id": "HTTPReasoner",
      "name": "HTTP: Reasoner",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [3040, 120]
    },
    {
      "parameters": {
        "functionCode": "const text = $json?.choices?.[0]?.message?.content || \"\";\nreturn [{ message: text }];"
      },
      "id": "ExtractText",
      "name": "Extract Final Text",
      "type": "n8n-nodes-base.function",
      "typeVersion": 2,
      "position": [3270, 120]
    },
    {
      "parameters": {
        "responseBody": "={{$json}}",
        "options": {
          "responseCode": 200
        }
      },
      "id": "Respond",
      "name": "Respond to Webhook",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 2,
      "position": [3500, 120]
    }
  ],
  "connections": {
    "Webhook": {
      "main": [[{ "node": "Normalize Input", "type": "main", "index": 0 }]]
    },
    "Normalize Input": {
      "main": [[{ "node": "Build Classifier Payload", "type": "main", "index": 0 }]]
    },
    "Build Classifier Payload": {
      "main": [[{ "node": "HTTP: Classifier", "type": "main", "index": 0 }]]
    },
    "HTTP: Classifier": {
      "main": [[{ "node": "Parse Classifier JSON", "type": "main", "index": 0 }]]
    },
    "Parse Classifier JSON": {
      "main": [[{ "node": "Load KB (Pre-approved)", "type": "main", "index": 0 }]]
    },
    "Load KB (Pre-approved)": {
      "main": [[{ "node": "Merge + Guard", "type": "main", "index": 0 }]]
    },
    "Merge + Guard": {
      "main": [[{ "node": "Build Strategist Payload", "type": "main", "index": 0 }]]
    },
    "Build Strategist Payload": {
      "main": [[{ "node": "HTTP: Strategist", "type": "main", "index": 0 }]]
    },
    "HTTP: Strategist": {
      "main": [[{ "node": "Parse Strategist JSON", "type": "main", "index": 0 }]]
    },
    "Parse Strategist JSON": {
      "main": [[{ "node": "Schema Check", "type": "main", "index": 0 }]]
    },
    "Schema Check": {
      "main": [
        [{ "node": "Build Reasoner Payload", "type": "main", "index": 0 }],
        [{ "node": "Fallback Picks", "type": "main", "index": 0 }]
      ]
    },
    "Fallback Picks": {
      "main": [[{ "node": "Build Reasoner Payload", "type": "main", "index": 0 }]]
    },
    "Build Reasoner Payload": {
      "main": [[{ "node": "HTTP: Reasoner", "type": "main", "index": 0 }]]
    },
    "HTTP: Reasoner": {
      "main": [[{ "node": "Extract Final Text", "type": "main", "index": 0 }]]
    },
    "Extract Final Text": {
      "main": [[{ "node": "Respond to Webhook", "type": "main", "index": 0 }]]
    }
  }
}
