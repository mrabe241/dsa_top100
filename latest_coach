import json
import re

# ----- config -----
BASE_FROM = 3111
BASE_TO   = 4000
PAT = re.compile(r"^ABC-(\d+)$")  # allow variable digit lengths

def remap_abc(s: str) -> str:
    """Shift ABC-3111 series to start at ABC-4000, keeping offsets."""
    m = PAT.match(s or "")
    if not m:
        return s
    n = int(m.group(1))
    if n < BASE_FROM:
        return s
    new_n = BASE_TO + (n - BASE_FROM)
    return f"ABC-{new_n}"  # keep natural width

def normalize(text: str) -> str:
    """Normalize for deduplication: lowercase, remove non-alphanumeric."""
    return re.sub(r'[^a-z0-9]', '', text.lower())

def walk_remap(obj):
    """Recursively walk structure and remap ABC codes."""
    if isinstance(obj, dict):
        return {k: walk_remap(v) for k, v in obj.items()}
    elif isinstance(obj, list):
        return [walk_remap(v) for v in obj]
    elif isinstance(obj, str):
        return remap_abc(obj)
    return obj

def dedup_by_key_desc(items):
    """Remove duplicates where key+Desc match after normalization."""
    seen = set()
    out = []
    for it in items:
        if isinstance(it, dict):
            k = normalize(str(it.get("key", "")))
            d = normalize(str(it.get("Desc", "")))
            sig = (k, d)
            if sig in seen:
                continue
            seen.add(sig)
        out.append(it)
    return out

# ----- load -----
with open("data.json", "r", encoding="utf-8") as f:
    data = json.load(f)

# ----- dedup if list or dict[data] -----
if isinstance(data, list):
    data = dedup_by_key_desc(data)
elif isinstance(data, dict) and isinstance(data.get("data"), list):
    data["data"] = dedup_by_key_desc(data["data"])

# ----- remap codes everywhere -----
updated = walk_remap(data)

# ----- save -----
with open("data_updated.json", "w", encoding="utf-8") as f:
    json.dump(updated, f, indent=2, ensure_ascii=False)
